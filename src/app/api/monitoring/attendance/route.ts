// app/api/monitoring/attendance/route.ts

import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs";
import { cookies } from "next/headers";
import { NextRequest, NextResponse } from "next/server";

export const dynamic = "force-dynamic";

// ðŸ”¹ Definisikan tipe data agar tidak perlu pakai `any`
interface AttendanceRecord {
Â  date: string;
Â  status: string;
}

interface Student {
Â  student_id: string;
Â  name: string;
Â  attendance_records: AttendanceRecord[];
}

export async function GET(request: NextRequest) {
Â  const cookieStore = cookies();
Â  const supabase = createRouteHandlerClient({ cookies: () => cookieStore });

Â  const { searchParams } = new URL(request.url);
Â  const classId = searchParams.get("class_id");
Â  const startDate = searchParams.get("start_date");
Â  const endDate = searchParams.get("end_date");

Â  if (!classId || !startDate || !endDate) {
Â  Â  return NextResponse.json(
Â  Â  Â  { message: "Parameter class_id, start_date, dan end_date diperlukan." },
Â  Â  Â  { status: 400 }
Â  Â  );
Â  }

Â  try {
    // 1. Ambil data siswa (Monitoring Data) - INI TETAP PER KELAS, sudah benar
Â  Â  const { data: students, error: studentsError } = await supabase
Â  Â  Â  .from("students")
Â  Â  Â  .select(`
Â  Â  Â  Â  student_id: id,
Â  Â  Â  Â  name,
Â  Â  Â  Â  attendance_records ( date, status )
Â  Â  Â  `)
Â  Â  Â  .eq("class_id", classId)
Â  Â  Â  .eq("active", true)
Â  Â  Â  .gte("attendance_records.date", startDate)
Â  Â  Â  .lte("attendance_records.date", endDate)
Â  Â  Â  .order("name", { ascending: true });

Â  Â  if (studentsError) {
Â  Â  Â  console.error("Supabase students fetch error:", studentsError);
Â  Â  Â  throw new Error("Gagal mengambil data monitoring siswa.");
Â  Â  }

    // --- PERUBAHAN DI SINI ---
    // 2. Ambil hitungan hari aktif (Active Days Count) - INI SEKARANG GLOBAL
Â  Â  const { data: distinctDates, error: distinctDatesError } = await supabase.rpc(
Â  Â  Â  "get_all_active_dates", // <-- NAMA FUNGSI BARU (dari Canvas)
Â  Â  Â  {
Â  Â  Â  Â  // p_class_id: classId, // <-- PARAMETER INI DIHAPUS
Â  Â  Â  Â  p_start_date: startDate,
Â  Â  Â  Â  p_end_date: endDate,
Â  Â  Â  }
Â  Â  );
    // --- AKHIR PERUBAHAN ---

Â  Â  if (distinctDatesError) {
Â  Â  Â  console.error("RPC distinct dates error:", distinctDatesError);
      // Sebaiknya lempar error agar ditangkap oleh catch block
      throw new Error("Gagal mengambil data rekap tanggal aktif.");
Â  Â  }

Â  Â  // Hitung jumlah hari aktif hanya berdasarkan RPC yang baru
    // Logika fallback lama (berdasarkan `students`) dihapus karena itu per-kelas,
    // sedangkan kita ingin data global yang konsisten.
Â  Â  const activeDaysCount = (distinctDates && Array.isArray(distinctDates)) 
      ? distinctDates.length 
      : 0;

Â  Â  return NextResponse.json({
Â  Â  Â  monitoringData: students ?? [],
Â  Â  Â  activeDaysCount, // Ini sekarang adalah hitungan global
Â  Â  });

Â  } catch (error) {
Â  Â  const errorMessage =
Â  Â  Â  error instanceof Error ? error.message : "Terjadi kesalahan pada server";
Â  Â  return NextResponse.json({ message: errorMessage }, { status: 500 });
Â  }
}
